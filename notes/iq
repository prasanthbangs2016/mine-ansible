Q-ansible variable precedence..?

play level(4th precedence),
variable from a file(3rd precedence),
task level(2nd precedence),
inventory(5th precedence), 
cli level(1st precedence)

Q-Role..?
this is function in other programs.
group of tasks

structure
role/
    common/
        tasks/
            main.yml
        handlers/
            main.yml
        files/
            main.yml
        vars/
            main.yml

Q- facts?
these are predefined variables

Q-Runtime variables
during the runtime you run a task u get the output that output we will be using it somewhere using "register" variable we will print on screen

if you want to define variable between the task that is possible using "set_fact".

# #https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
# - name: Demo on Register
#   hosts: all
#   tasks:
#     - name: Print/get uptime
#       ansible.builtin.shell: uptime

#ansible-playbook -i inv -e ansible_user=centos -e ansible_password=DevOps321 02-vars.yml

#it will run the command it will not display the output hence we will use variable

# - name: Demo on Register
#   hosts: all
#   tasks:
#     - name: Print/get uptime
#       ansible.builtin.shell: uptime
#       register: SHELL_OUTPUT

#     - name: print output
#       ansible.builtin.debug:
#         msg: "{{ SHELL_OUTPUT }}"

    #   - name: print output
    #     ansible.builtin.debug:
    #       msg: "{{SHELL_OUTPUT.stdout}}"
    #   - name: print output
    #     ansible.builtin.set_fact:
    #       UPTIME: "{{SHELL_OUTPUT.stdout}}"

Q-conditions

- name: Demo on conditions
  hosts: all
  tasks:
    - name: Run if it is redhat family
      ansible.builtin.debug:
        msg: Hello Redhat
      when: ansible_os_family == "RedHat"

    - name: Run if it is debain family
      ansible.builtin.debug:
        msg: Hello Debian
      when: ansible_os_family == "Debain"


q- how do u handle errors in ansible
#this is to ignore failed commands
ignore_errors: yes

- name: this will not be counted as a failure
  command: /bin/false
  ignore_errors: yes

#Controlling What Defines Failure
- name: Fail task when the command error output prints FAILED
  command: /usr/bin/example-command -x -y -z
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"

#or based on the return code:

- name: Fail task when both files are identical
  raw: diff foo/file1 bar/file2
  register: diff_cmd
  failed_when: diff_cmd.rc == 0 or diff_cmd.rc >= 2

#Aborting the play
#The any_errors_fatal play option will mark all hosts as failed if any fails, causing an immediate abort:
- hosts: somehosts
  any_errors_fatal: true
  roles:
    - myrole





        
